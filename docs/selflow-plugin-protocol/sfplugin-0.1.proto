syntax = "proto3";
option go_package = "pkg/selflow-plugin";

package selflow_plugin;

// ---------- GLOBAL UTILITIES ----------

enum DiagnosticType {
  ERROR = 0;
  WARNING = 1;
  INFO = 2;
  DEBUG = 3;
}

message Diagnostic {
  DiagnosticType type = 1;
  string message = 2;
}

message Schema {
  // type of the schema (ex: string, number, boolean, object, list, map), leaved as black to allow sur-typing without
  // re-writing the proto configuration for example with selects, long strings, integer...
  string type = 1;
  // If the type is complex (ex: list, object), nested children types
  repeated Schema nestedGroups = 2;
  // description of the schema
  string description = 3;
  // if true, the field must be required to validate the schema
  bool required = 4;
  // if true the field will be marked as deprecated
  bool deprecated = 5;
}

// ---------- PLUGIN BASIS ----------

enum PluginType {
  INITIATOR = 0;
  ARCHITECT = 1;
}

message GetPluginSchema {
  message Request {
  }

  message Response {
    // List of plugin types that the plugin supports
    repeated PluginType pluginTypes = 1;
    // List of step schemas that the plugin support
    map<string, Schema> stepSchemas = 2;
  }
}

message ValidatePluginConfigSchema {
  message Request {
    bytes pluginConfig = 1;
  }

  message Response {
    bool valid = 1;
    repeated Diagnostic diagnotics = 2;
  }
}

service Plugin {
  rpc GetPluginSchema(GetPluginSchema.Request) returns (GetPluginSchema.Response);
  rpc ValidatePluginConfigSchema(ValidatePluginConfigSchema.Request) returns (ValidatePluginConfigSchema.Response);
}

// ---------- ARCHITECT PLUGIN ----------

message ValidateStepConfigSchema {
  message Request {
    string stepName = 1;
    bytes stepConfig = 2;
  }

  message Response {
    bool valid = 1;
    repeated Diagnostic diagnotics = 2;
  }
}

message RunStep {
  message Request {
    string stepName = 1;
    bytes stepConfig = 2;
  }

  message Response {

  }
}

service Architect {
  rpc ValidateStepConfigSchema(ValidateStepConfigSchema.Request) returns (ValidateStepConfigSchema.Response);
  rpc RunStep(RunStep.Request) returns (RunStep.Response);
}

