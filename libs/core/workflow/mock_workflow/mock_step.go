// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/selflow/selflow/pkg/workflow (interfaces: Workflow)

// Package mock_workflow is a generated GoMock package.
package mock_workflow

import (
	context "context"
	workflow2 "github.com/selflow/selflow/libs/core/workflow"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkflow is a mock of Workflow interface.
type MockWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowMockRecorder
}

// MockWorkflowMockRecorder is the mock recorder for MockWorkflow.
type MockWorkflowMockRecorder struct {
	mock *MockWorkflow
}

// NewMockWorkflow creates a new mock instance.
func NewMockWorkflow(ctrl *gomock.Controller) *MockWorkflow {
	mock := &MockWorkflow{ctrl: ctrl}
	mock.recorder = &MockWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflow) EXPECT() *MockWorkflowMockRecorder {
	return m.recorder
}

// AddStep mocks base method.
func (m *MockWorkflow) AddStep(arg0 workflow2.Step, arg1 []workflow2.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStep", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStep indicates an expected call of AddStep.
func (mr *MockWorkflowMockRecorder) AddStep(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStep", reflect.TypeOf((*MockWorkflow)(nil).AddStep), arg0, arg1)
}

// Equals mocks base method.
func (m *MockWorkflow) Equals(arg0 workflow2.Workflow) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equals", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equals indicates an expected call of Equals.
func (mr *MockWorkflowMockRecorder) Equals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equals", reflect.TypeOf((*MockWorkflow)(nil).Equals), arg0)
}

// Execute mocks base method.
func (m *MockWorkflow) Execute(arg0 context.Context) (map[string]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(map[string]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockWorkflowMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockWorkflow)(nil).Execute), arg0)
}

// Init mocks base method.
func (m *MockWorkflow) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockWorkflowMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockWorkflow)(nil).Init))
}
