// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: internal/selflow-runner-proto/sfrunner.proto

package selflow_runner_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContainerSpawnerClient is the client API for ContainerSpawner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerSpawnerClient interface {
	SpawnContainer(ctx context.Context, in *SpawnContainer_Request, opts ...grpc.CallOption) (*SpawnContainer_Response, error)
}

type containerSpawnerClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerSpawnerClient(cc grpc.ClientConnInterface) ContainerSpawnerClient {
	return &containerSpawnerClient{cc}
}

func (c *containerSpawnerClient) SpawnContainer(ctx context.Context, in *SpawnContainer_Request, opts ...grpc.CallOption) (*SpawnContainer_Response, error) {
	out := new(SpawnContainer_Response)
	err := c.cc.Invoke(ctx, "/selflow_runner_proto.ContainerSpawner/SpawnContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerSpawnerServer is the server API for ContainerSpawner service.
// All implementations must embed UnimplementedContainerSpawnerServer
// for forward compatibility
type ContainerSpawnerServer interface {
	SpawnContainer(context.Context, *SpawnContainer_Request) (*SpawnContainer_Response, error)
	mustEmbedUnimplementedContainerSpawnerServer()
}

// UnimplementedContainerSpawnerServer must be embedded to have forward compatible implementations.
type UnimplementedContainerSpawnerServer struct {
}

func (UnimplementedContainerSpawnerServer) SpawnContainer(context.Context, *SpawnContainer_Request) (*SpawnContainer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnContainer not implemented")
}
func (UnimplementedContainerSpawnerServer) mustEmbedUnimplementedContainerSpawnerServer() {}

// UnsafeContainerSpawnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerSpawnerServer will
// result in compilation errors.
type UnsafeContainerSpawnerServer interface {
	mustEmbedUnimplementedContainerSpawnerServer()
}

func RegisterContainerSpawnerServer(s grpc.ServiceRegistrar, srv ContainerSpawnerServer) {
	s.RegisterService(&ContainerSpawner_ServiceDesc, srv)
}

func _ContainerSpawner_SpawnContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnContainer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerSpawnerServer).SpawnContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selflow_runner_proto.ContainerSpawner/SpawnContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerSpawnerServer).SpawnContainer(ctx, req.(*SpawnContainer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerSpawner_ServiceDesc is the grpc.ServiceDesc for ContainerSpawner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerSpawner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "selflow_runner_proto.ContainerSpawner",
	HandlerType: (*ContainerSpawnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpawnContainer",
			Handler:    _ContainerSpawner_SpawnContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/selflow-runner-proto/sfrunner.proto",
}

// SelflowRunnerClient is the client API for SelflowRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SelflowRunnerClient interface {
	InitRunner(ctx context.Context, in *InitRunner_Request, opts ...grpc.CallOption) (*InitRunner_Response, error)
}

type selflowRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewSelflowRunnerClient(cc grpc.ClientConnInterface) SelflowRunnerClient {
	return &selflowRunnerClient{cc}
}

func (c *selflowRunnerClient) InitRunner(ctx context.Context, in *InitRunner_Request, opts ...grpc.CallOption) (*InitRunner_Response, error) {
	out := new(InitRunner_Response)
	err := c.cc.Invoke(ctx, "/selflow_runner_proto.SelflowRunner/InitRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelflowRunnerServer is the server API for SelflowRunner service.
// All implementations must embed UnimplementedSelflowRunnerServer
// for forward compatibility
type SelflowRunnerServer interface {
	InitRunner(context.Context, *InitRunner_Request) (*InitRunner_Response, error)
	mustEmbedUnimplementedSelflowRunnerServer()
}

// UnimplementedSelflowRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedSelflowRunnerServer struct {
}

func (UnimplementedSelflowRunnerServer) InitRunner(context.Context, *InitRunner_Request) (*InitRunner_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitRunner not implemented")
}
func (UnimplementedSelflowRunnerServer) mustEmbedUnimplementedSelflowRunnerServer() {}

// UnsafeSelflowRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SelflowRunnerServer will
// result in compilation errors.
type UnsafeSelflowRunnerServer interface {
	mustEmbedUnimplementedSelflowRunnerServer()
}

func RegisterSelflowRunnerServer(s grpc.ServiceRegistrar, srv SelflowRunnerServer) {
	s.RegisterService(&SelflowRunner_ServiceDesc, srv)
}

func _SelflowRunner_InitRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRunner_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelflowRunnerServer).InitRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selflow_runner_proto.SelflowRunner/InitRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelflowRunnerServer).InitRunner(ctx, req.(*InitRunner_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SelflowRunner_ServiceDesc is the grpc.ServiceDesc for SelflowRunner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SelflowRunner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "selflow_runner_proto.SelflowRunner",
	HandlerType: (*SelflowRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitRunner",
			Handler:    _SelflowRunner_InitRunner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/selflow-runner-proto/sfrunner.proto",
}
