// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/selflow/selflow/internal/selflow-runner-proto (interfaces: ContainerSpawner)

// Package mock_selflow_runner_proto is a generated GoMock package.
package mock_selflow_runner_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContainerSpawner is a mock of ContainerSpawner interface.
type MockContainerSpawner struct {
	ctrl     *gomock.Controller
	recorder *MockContainerSpawnerMockRecorder
}

// MockContainerSpawnerMockRecorder is the mock recorder for MockContainerSpawner.
type MockContainerSpawnerMockRecorder struct {
	mock *MockContainerSpawner
}

// NewMockContainerSpawner creates a new mock instance.
func NewMockContainerSpawner(ctrl *gomock.Controller) *MockContainerSpawner {
	mock := &MockContainerSpawner{ctrl: ctrl}
	mock.recorder = &MockContainerSpawnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerSpawner) EXPECT() *MockContainerSpawnerMockRecorder {
	return m.recorder
}

// SpawnContainer mocks base method.
func (m *MockContainerSpawner) SpawnContainer(arg0 context.Context, arg1 string, arg2 map[string]string, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpawnContainer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SpawnContainer indicates an expected call of SpawnContainer.
func (mr *MockContainerSpawnerMockRecorder) SpawnContainer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnContainer", reflect.TypeOf((*MockContainerSpawner)(nil).SpawnContainer), arg0, arg1, arg2, arg3, arg4)
}
